version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3000
      # NEXT_PUBLIC_API_BASE_URL: https://api.yourdomain.com
      # Tambahkan env lain sesuai kebutuhan dari frontend/.env.example
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  backend-php:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: https://api.yourdomain.com
      # Jika belum punya APP_KEY, backend akan generate otomatis
      APP_KEY: ${APP_KEY}
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_DATABASE: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      CACHE_DRIVER: file
      SESSION_DRIVER: file
      QUEUE_CONNECTION: sync
      RUN_MIGRATIONS: "true" # set "false" jika tidak ingin auto migrate
      # CORS/Sanctum (sesuaikan domain frontend jika pakai auth)
      # SANCTUM_STATEFUL_DOMAINS: yourdomain.com,api.yourdomain.com
      # SESSION_DOMAIN: yourdomain.com
      # Tambahkan env lain sesuai kebutuhan dari backend/.env.example
    volumes:
      - backend_storage:/var/www/html/storage
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    depends_on:
      - backend-php
    volumes:
      - ./backend:/var/www/html
      - backend_storage:/var/www/html/storage
      - ./backend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  backend_storage: